#!/bin/sh

scriptname="$0"

show_usage () {
    cat <<USAGE_END
Usage:
    $scriptname [-d] [-s shell] [dir]
    $scriptname -h
USAGE_END
}

sigexit_handler () {
    # Signal handler for EXIT.
    # Will remove the work directory "$opt_dir" if so requested.

    if [ -n "$opt_dir" ]; then
        if [ "$opt_delete" -eq 1 ]; then
            printf "Removing work directory '%s'\n" "$opt_dir"
            rm -rf "$opt_dir"
        else
            printf "Leaving work dir '%s' as it is.\n" "$opt_dir"
        fi
    fi
}

sighup_handler () {
    # Signal handler for HUP.
    # Will set opt_delete=0.

    opt_delete=0
    printf "SIGHUP received.\n"
}

opt_dir=""
opt_sh="/bin/sh"
opt_delete=0

while getopts 'dhs:w:' opt; do
    case "$opt" in
        d)  opt_delete=1        ;;
        h)  show_usage;
            exit 0              ;;
        s)  opt_sh="$OPTARG"    ;;
        *)  show_usage;
            exit 1              ;;
    esac
done

shift "$(( OPTIND - 1 ))"
opt_dir="$1"

# Validate the shell:
# Make sure that the specified shell is listed in "/etc/shells".
# Complain and terminate otherwise.

if [ "$opt_sh" != "/bin/sh" ]; then
    if ! grep -q -x -F "$opt_sh" "/etc/shells"; then
        printf "Invalid shell '%s'\n" "$opt_sh"
        printf "Valid shells:\n"
        awk '!/^#/ && !/^ *$/ { printf("\t%s\n", $0) }' "/etc/shells"
        exit 1
    fi
fi

# Set up work directory.

if [ -z "$opt_dir" ]; then
    opt_dir="$( mktemp -d )"
elif [ ! -d "$opt_dir" ]; then
    mkdir -p "$opt_dir"
fi

if [ ! -d "$opt_dir" ]; then
    printf "Failed to create/locate work directory\n"
    exit 1
fi

printf "Using work directory: '%s'\n" "$opt_dir"

if [ "$opt_delete" -eq 1 ]; then
    printf "This directory will be deleted!\n"
    printf "Cancel deletion with: kill -s HUP %d\n" "$$"
fi

# Install signal handlers.

trap 'sighup_handler' HUP
trap 'sigexit_handler' EXIT

# Fire things up.

printf "Starting new shell '%s' in '%s'\n" "$opt_sh" "$opt_dir"
( cd "$opt_dir" && env -i LC_ALL=C "$opt_sh" )
